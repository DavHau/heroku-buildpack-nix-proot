#!/usr/bin/env bash

set -eo pipefail
set -o errtrace
set -o nounset

DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

source $DIR/script-common

BUILD_DIR=$1

test -d /nix # fail here if /nix doesn't exist

# pass bulid dir to subsidiary scripts
export BUILD_DIR
# make sure that nix installs its link in the right place
export HOME=$BUILD_DIR

suppress_locale_warnings

topic "Installing nix $NIX_VERSION"
cd /nix
./install 2>&1| indent

source $BUILD_DIR/.nix-profile/etc/profile.d/nix.sh

export PATH=$BUILD_DIR/.nix-profile/bin:$PATH

# set $nix to the hash of the nix version in store
eval $(grep nix= ./install | head -n 1)

export nix

# define NIX_FILE, PROG_NAME, PROG_PROFILE, CLOSURE_NAME, and CLOSURE
prog=$(prog_name_profile_closure)
eval $prog

cd $BUILD_DIR

try_download_closure

if [ -e $CLOSURE ]; then
  topic "Closure found; downloading."
  nix-store --import < $CLOSURE | indent

  topic "Installing $PROG_NAME"
  nix-env -Q -i -f $NIX_FILE 2>&1| indent

  topic "Clearing other packages"
  nix-collect-garbage --option gc-keep-derivations false -d 2>&1 | indent
elif [ -n "${NIX_BUILD_ON_PUSH:-}" ]; then
  topic "Build on push active, building now:"
  source $DIR/build
fi

APP_NIX_ROOT_PATH=${REAL_APP_DIR:=/app}/nix-mnt/$NIX_VERSION_FULL

topic "Creating .profile.d"

mkdir -p $BUILD_DIR/.profile.d
cat <<EOF > $BUILD_DIR/.profile.d/000_nix.sh
export NIX_VERSION_FULL=$NIX_VERSION_FULL
export nix=$nix
export PATH=$REAL_APP_DIR/.nix-profile/bin:$REAL_APP_DIR/bin:\$PATH
export EC2_ACCESS_KEY=\$NIX_S3_KEY
export EC2_SECRET_KEY=\$NIX_S3_SECRET
EOF

topic "Copying build scripts"
cp -f $DIR/build $DIR/build-proot $DIR/script-common $BUILD_DIR/bin/
chmod u+x $BUILD_DIR/bin/build

REAL_NIX_FILE=$REAL_APP_DIR/$(basename $NIX_FILE)

topic "Creating run_proot.sh"
cat <<EOF > $BUILD_DIR/bin/run_proot.sh
#!$REAL_APP_DIR/bin/proot -b $APP_NIX_ROOT_PATH:/nix bash

source $REAL_APP_DIR/.nix-profile/etc/profile.d/nix.sh

nix-env -i -f $REAL_NIX_FILE
CMD=\$1
\$CMD "\${@:2}"
EOF

chmod u+x $BUILD_DIR/bin/run_proot.sh